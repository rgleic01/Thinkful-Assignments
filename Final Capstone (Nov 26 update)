{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Statement of Purpose:\n",
    "The collection of community health needs and outcomes data allows for health systems to assess the current issues facing their community. But I believe that the volume of data collected at the county level is sufficient to actually predict future health outcomes. This predictive power can be used to preempt adverse health outcomes before they create a burden on local health systems.\n",
    "\n",
    "Source Data:\n",
    "First, I’ll compile a master dataset including relevant demographic data, 34 Social Determinants of Health (SDOHs) and 3 specific health outcomes to predict for all US counties for the years 2013-2017. The two major sources I’ll use are County Health Rankings and cms.gov Mapping Medicare Discrepancies datasets. \n",
    "\n",
    "Analysis:\n",
    "I’ll treat the demographic data and 34 SDOHs as features, and 3 outcomes (number of hospitalizations, depression & diabetes prevlance) as the targets. The model I’ll use is a multi-output random forest regressor. The Random Forest algorithm can handle the large variety and divergent scales of data found among the 34 SDOHs. And as a multi-output model, it can generate predictions for all 3 health outcomes. After training the model on the 2013-2017 data, I can verify it using 2019 as test data. Descoping might be necessary as I assess the features. \n",
    "\n",
    "This model will be able to describe which determinants are most closely correlated with particular health outcomes over time. I will use this information to identify a county at high risk for one of the selected health outcomes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries for reading data and EDA\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import glob\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First I'll load and format data from the Mapping Medicare Disparities tool (https://data.cms.gov/mapping-medicare-disparities). All of the data is at the county level for years 2012 - 2017:<br>\n",
    "1) Total number of hospitalizations for depression-related conditions<br>\n",
    "2) Total number of hospitalizations for other causes<br>\n",
    "3) Prevalence of depression<br>\n",
    "4) Number of hospitalizations for opioid use disorders <br>\n",
    "Then I'll extract the 5 columns needed to merge with other datasets (state, county, fips, year, and indicator)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>county</th>\n",
       "      <th>fips</th>\n",
       "      <th>year</th>\n",
       "      <th>Dhosp</th>\n",
       "      <th>All_prim</th>\n",
       "      <th>Dprev</th>\n",
       "      <th>OUD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALABAMA</td>\n",
       "      <td>Autauga County</td>\n",
       "      <td>1001</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>302</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALABAMA</td>\n",
       "      <td>Baldwin County</td>\n",
       "      <td>1003</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALABAMA</td>\n",
       "      <td>Barbour County</td>\n",
       "      <td>1005</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>310</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALABAMA</td>\n",
       "      <td>Bibb County</td>\n",
       "      <td>1007</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>303</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALABAMA</td>\n",
       "      <td>Blount County</td>\n",
       "      <td>1009</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>281</td>\n",
       "      <td>17</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     state          county  fips  year  Dhosp  All_prim  Dprev  OUD\n",
       "0  ALABAMA  Autauga County  1001  2013      1       302     13    8\n",
       "1  ALABAMA  Baldwin County  1003  2013      1       273     13    8\n",
       "2  ALABAMA  Barbour County  1005  2013      3       310     12    5\n",
       "3  ALABAMA     Bibb County  1007  2013      3       303     16   16\n",
       "4  ALABAMA   Blount County  1009  2013      3       281     17   13"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read 24 Mapping Medicare Discrepancies files, create and name 24 dfs\n",
    "\n",
    "# Read in data on number of hospitalizations for depression\n",
    "mmd_dhosp_files = glob.glob('mmd_dhosp*.csv')\n",
    "for i, file in enumerate(mmd_dhosp_files):\n",
    "    if i == 0:\n",
    "        df = pd.read_csv(file)\n",
    "        df = df[df.condition=='Depressive Disorders'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        df.columns = ['state', 'county', 'fips', 'year', 'Dhosp']\n",
    "    else:\n",
    "        temp = pd.read_csv(file)\n",
    "        temp = temp[temp.condition=='Depressive Disorders'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        temp.columns = ['state', 'county', 'fips', 'year', 'Dhosp']\n",
    "        df = pd.concat([df, temp])\n",
    "\n",
    "# Read in data on number of hospitalizations for all causes\n",
    "mmd_all_prim_files = glob.glob('mmd_all_prim*.csv')\n",
    "for i, file in enumerate(mmd_all_prim_files):\n",
    "    if i == 0:\n",
    "        df2 = pd.read_csv(file)\n",
    "        df2 = df2[df2.condition=='All-Cause Hospitalizations'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        df2.columns = ['state', 'county', 'fips', 'year', 'All_prim']\n",
    "    else:\n",
    "        temp = pd.read_csv(file)\n",
    "        temp = temp[temp.condition=='All-Cause Hospitalizations'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        temp.columns = ['state', 'county', 'fips', 'year', 'All_prim']\n",
    "        df2 = pd.concat([df2, temp])\n",
    "df = pd.merge(df, df2, on=['state', 'county', 'fips', 'year'])\n",
    "    \n",
    "# Read in data on prevalence of depression\n",
    "mmd_dprev_files = glob.glob('mmd_dprev*.csv')\n",
    "for i, file in enumerate(mmd_dprev_files):\n",
    "    if i == 0:\n",
    "        df3 = pd.read_csv(file)\n",
    "        df3 = df3[df3.condition=='Depression'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        df3.columns = ['state', 'county', 'fips', 'year', 'Dprev']\n",
    "    else:\n",
    "        temp = pd.read_csv(file)\n",
    "        temp = temp[temp.condition=='Depression'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        temp.columns = ['state', 'county', 'fips', 'year', 'Dprev']\n",
    "        df3 = pd.concat([df3, temp])\n",
    "df = pd.merge(df, df3, on=['state', 'county', 'fips', 'year'])\n",
    "    \n",
    "# Read in data on number of hospitalizations for opioid use\n",
    "mmd_opd_files = glob.glob('mmd_opd*.csv')\n",
    "for i, file in enumerate(mmd_opd_files):\n",
    "    if i == 0:\n",
    "        df4 = pd.read_csv(file)\n",
    "        df4 = df4[df4.condition=='Overarching Opioid Use Disorder (OUD) Indicator'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        df4.columns = ['state', 'county', 'fips', 'year', 'OUD']\n",
    "    else:\n",
    "        temp = pd.read_csv(file)\n",
    "        temp = temp[temp.condition=='Overarching Opioid Use Disorder (OUD) Indicator'][['state', 'county', 'fips', 'year', 'analysis_value']]\n",
    "        temp.columns = ['state', 'county', 'fips', 'year', 'OUD']\n",
    "        df4 = pd.concat([df4, temp])\n",
    "mmd_df = pd.merge(df, df4, on=['state', 'county', 'fips', 'year'])\n",
    "\n",
    "mmd_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second data source I'll use is County Health Rankings (CHR, https://www.countyhealthrankings.org/). CHR provides county-level data related to demographics and Social Determinants of Health (SDOHs). This includes data economic information such as medium income and unemployment, environmental data such as air pollution, and educational data such as absenteeism and level of education."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read and format County Health Rankings data\n",
    "chr_2012 = pd.read_csv('chr_data2012.csv')\n",
    "chr_2013 = pd.read_csv('chr_data2013.csv')\n",
    "chr_2014 = pd.read_csv('chr_data2014.csv')\n",
    "chr_2015 = pd.read_csv('chr_data2015.csv')\n",
    "chr_2016 = pd.read_csv('chr_data2016.csv')\n",
    "chr_2017 = pd.read_csv('chr_data2017.csv')\n",
    "\n",
    "def format_df(df):\n",
    "    df = df.drop([0, 1])\n",
    "    for i, col in enumerate(df.columns):\n",
    "        if i < 7: pass\n",
    "        elif col[-5:] != 'value':\n",
    "            df = df.drop(columns = col)\n",
    "    df = df.drop(columns = ['State FIPS Code', 'County FIPS Code', 'County Ranked (Yes=1/No=0)'])\n",
    "    df = df.rename(columns={\"5-digit FIPS Code\": \"fips\", \"Name\": \"county\", \"Release Year\": \"year\"})\n",
    "    return(df)\n",
    "\n",
    "chr_2012 = format_df(chr_2012)\n",
    "chr_2013 = format_df(chr_2013)\n",
    "chr_2014 = format_df(chr_2014)\n",
    "chr_2015 = format_df(chr_2015)\n",
    "chr_2016 = format_df(chr_2016)\n",
    "chr_2017 = format_df(chr_2017)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(15956, 125)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>% 65 and older raw value</th>\n",
       "      <th>% American Indian and Alaskan Native raw value</th>\n",
       "      <th>% Asian raw value</th>\n",
       "      <th>% Females raw value</th>\n",
       "      <th>% Hispanic raw value</th>\n",
       "      <th>% Native Hawaiian/Other Pacific Islander raw value</th>\n",
       "      <th>% Non-Hispanic African American raw value</th>\n",
       "      <th>% Non-Hispanic white raw value</th>\n",
       "      <th>% Rural raw value</th>\n",
       "      <th>% below 18 years of age raw value</th>\n",
       "      <th>...</th>\n",
       "      <th>Unemployment raw value</th>\n",
       "      <th>Uninsured adults raw value</th>\n",
       "      <th>Uninsured children raw value</th>\n",
       "      <th>Uninsured raw value</th>\n",
       "      <th>Violent crime raw value</th>\n",
       "      <th>W-2 enrollment raw value</th>\n",
       "      <th>Year structure built raw value</th>\n",
       "      <th>county</th>\n",
       "      <th>fips</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.1400421426</td>\n",
       "      <td>0.0069331257</td>\n",
       "      <td>0.0119004985</td>\n",
       "      <td>0.5149662484</td>\n",
       "      <td>0.0403661243</td>\n",
       "      <td>0.0010883371</td>\n",
       "      <td>0.2618865481</td>\n",
       "      <td>0.6676482591</td>\n",
       "      <td>0.409631829</td>\n",
       "      <td>0.2346874909</td>\n",
       "      <td>...</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.212</td>\n",
       "      <td>0.063</td>\n",
       "      <td>0.169</td>\n",
       "      <td>426.569135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>01000</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.1225505274</td>\n",
       "      <td>0.0048310927</td>\n",
       "      <td>0.0092460238</td>\n",
       "      <td>0.5122043896</td>\n",
       "      <td>0.0260191434</td>\n",
       "      <td>0.000940887</td>\n",
       "      <td>0.1832558308</td>\n",
       "      <td>0.7640183111</td>\n",
       "      <td>0.4200216232</td>\n",
       "      <td>0.2603361862</td>\n",
       "      <td>...</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.174</td>\n",
       "      <td>0.053</td>\n",
       "      <td>0.136</td>\n",
       "      <td>300.33668316</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Autauga County</td>\n",
       "      <td>01001</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.1707236085</td>\n",
       "      <td>0.0071927034</td>\n",
       "      <td>0.0075568909</td>\n",
       "      <td>0.5115174301</td>\n",
       "      <td>0.0452931442</td>\n",
       "      <td>0.0006587509</td>\n",
       "      <td>0.0957491819</td>\n",
       "      <td>0.8324630323</td>\n",
       "      <td>0.4227909911</td>\n",
       "      <td>0.2279867393</td>\n",
       "      <td>...</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.231</td>\n",
       "      <td>0.091</td>\n",
       "      <td>0.191</td>\n",
       "      <td>214.73520962</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Baldwin County</td>\n",
       "      <td>01003</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.1462443305</td>\n",
       "      <td>0.0064899148</td>\n",
       "      <td>0.0044618164</td>\n",
       "      <td>0.4654301412</td>\n",
       "      <td>0.0534680482</td>\n",
       "      <td>0.0016962277</td>\n",
       "      <td>0.4640657841</td>\n",
       "      <td>0.4667944983</td>\n",
       "      <td>0.677896347</td>\n",
       "      <td>0.2181127623</td>\n",
       "      <td>...</td>\n",
       "      <td>0.114</td>\n",
       "      <td>0.236</td>\n",
       "      <td>0.064</td>\n",
       "      <td>0.185</td>\n",
       "      <td>150.04942805</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Barbour County</td>\n",
       "      <td>01005</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.1326100325</td>\n",
       "      <td>0.0031186858</td>\n",
       "      <td>0.0012738294</td>\n",
       "      <td>0.4613897918</td>\n",
       "      <td>0.0198980936</td>\n",
       "      <td>0.0013177545</td>\n",
       "      <td>0.2221734165</td>\n",
       "      <td>0.7452341211</td>\n",
       "      <td>0.6835260746</td>\n",
       "      <td>0.2205042607</td>\n",
       "      <td>...</td>\n",
       "      <td>0.099</td>\n",
       "      <td>0.224</td>\n",
       "      <td>0.061</td>\n",
       "      <td>0.177</td>\n",
       "      <td>246.49755063</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bibb County</td>\n",
       "      <td>01007</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 125 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  % 65 and older raw value % American Indian and Alaskan Native raw value  \\\n",
       "2             0.1400421426                                   0.0069331257   \n",
       "3             0.1225505274                                   0.0048310927   \n",
       "4             0.1707236085                                   0.0071927034   \n",
       "5             0.1462443305                                   0.0064899148   \n",
       "6             0.1326100325                                   0.0031186858   \n",
       "\n",
       "  % Asian raw value % Females raw value % Hispanic raw value  \\\n",
       "2      0.0119004985        0.5149662484         0.0403661243   \n",
       "3      0.0092460238        0.5122043896         0.0260191434   \n",
       "4      0.0075568909        0.5115174301         0.0452931442   \n",
       "5      0.0044618164        0.4654301412         0.0534680482   \n",
       "6      0.0012738294        0.4613897918         0.0198980936   \n",
       "\n",
       "  % Native Hawaiian/Other Pacific Islander raw value  \\\n",
       "2                                       0.0010883371   \n",
       "3                                        0.000940887   \n",
       "4                                       0.0006587509   \n",
       "5                                       0.0016962277   \n",
       "6                                       0.0013177545   \n",
       "\n",
       "  % Non-Hispanic African American raw value % Non-Hispanic white raw value  \\\n",
       "2                              0.2618865481                   0.6676482591   \n",
       "3                              0.1832558308                   0.7640183111   \n",
       "4                              0.0957491819                   0.8324630323   \n",
       "5                              0.4640657841                   0.4667944983   \n",
       "6                              0.2221734165                   0.7452341211   \n",
       "\n",
       "  % Rural raw value % below 18 years of age raw value  ...  \\\n",
       "2       0.409631829                      0.2346874909  ...   \n",
       "3      0.4200216232                      0.2603361862  ...   \n",
       "4      0.4227909911                      0.2279867393  ...   \n",
       "5       0.677896347                      0.2181127623  ...   \n",
       "6      0.6835260746                      0.2205042607  ...   \n",
       "\n",
       "  Unemployment raw value Uninsured adults raw value  \\\n",
       "2                   0.09                      0.212   \n",
       "3                   0.08                      0.174   \n",
       "4                  0.081                      0.231   \n",
       "5                  0.114                      0.236   \n",
       "6                  0.099                      0.224   \n",
       "\n",
       "  Uninsured children raw value Uninsured raw value Violent crime raw value  \\\n",
       "2                        0.063               0.169              426.569135   \n",
       "3                        0.053               0.136            300.33668316   \n",
       "4                        0.091               0.191            214.73520962   \n",
       "5                        0.064               0.185            150.04942805   \n",
       "6                        0.061               0.177            246.49755063   \n",
       "\n",
       "  W-2 enrollment raw value Year structure built raw value          county  \\\n",
       "2                      NaN                            NaN         Alabama   \n",
       "3                      NaN                            NaN  Autauga County   \n",
       "4                      NaN                            NaN  Baldwin County   \n",
       "5                      NaN                            NaN  Barbour County   \n",
       "6                      NaN                            NaN     Bibb County   \n",
       "\n",
       "    fips  year  \n",
       "2  01000  2013  \n",
       "3  01001  2013  \n",
       "4  01003  2013  \n",
       "5  01005  2013  \n",
       "6  01007  2013  \n",
       "\n",
       "[5 rows x 125 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concatenate datasets into 2013 - 2017 df\n",
    "chr_df = pd.concat([chr_2013, chr_2014, chr_2015, chr_2016, chr_2017], sort=True)\n",
    "print(chr_df.shape)\n",
    "chr_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'll merge data from the two sources (MMD and CHR) on the Federal Information Processing Standard ('fips') value, which is a unique 5-digit indicator given to each county in the country. But first I'll add a leading '0' to the MMD dataframe and convert the 'years' value in the CHR data to int."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(15955, 125)\n",
      "(19364, 8)\n",
      "(7151, 131)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>county_x</th>\n",
       "      <th>fips</th>\n",
       "      <th>year</th>\n",
       "      <th>Dhosp</th>\n",
       "      <th>All_prim</th>\n",
       "      <th>Dprev</th>\n",
       "      <th>OUD</th>\n",
       "      <th>% 65 and older raw value</th>\n",
       "      <th>% American Indian and Alaskan Native raw value</th>\n",
       "      <th>...</th>\n",
       "      <th>Total female population raw value</th>\n",
       "      <th>Total male population raw value</th>\n",
       "      <th>Unemployment raw value</th>\n",
       "      <th>Uninsured adults raw value</th>\n",
       "      <th>Uninsured children raw value</th>\n",
       "      <th>Uninsured raw value</th>\n",
       "      <th>Violent crime raw value</th>\n",
       "      <th>W-2 enrollment raw value</th>\n",
       "      <th>Year structure built raw value</th>\n",
       "      <th>county_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Autauga County</td>\n",
       "      <td>01001</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>302</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>0.1225505274</td>\n",
       "      <td>0.0048310927</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.174</td>\n",
       "      <td>0.053</td>\n",
       "      <td>0.136</td>\n",
       "      <td>300.33668316</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Autauga County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Baldwin County</td>\n",
       "      <td>01003</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>0.1707236085</td>\n",
       "      <td>0.0071927034</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.231</td>\n",
       "      <td>0.091</td>\n",
       "      <td>0.191</td>\n",
       "      <td>214.73520962</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Baldwin County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Barbour County</td>\n",
       "      <td>01005</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>310</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>0.1462443305</td>\n",
       "      <td>0.0064899148</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.114</td>\n",
       "      <td>0.236</td>\n",
       "      <td>0.064</td>\n",
       "      <td>0.185</td>\n",
       "      <td>150.04942805</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Barbour County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Bibb County</td>\n",
       "      <td>01007</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>303</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>0.1326100325</td>\n",
       "      <td>0.0031186858</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.099</td>\n",
       "      <td>0.224</td>\n",
       "      <td>0.061</td>\n",
       "      <td>0.177</td>\n",
       "      <td>246.49755063</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bibb County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Blount County</td>\n",
       "      <td>01009</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>281</td>\n",
       "      <td>17</td>\n",
       "      <td>13</td>\n",
       "      <td>0.1503372228</td>\n",
       "      <td>0.0062243182</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.083</td>\n",
       "      <td>0.239</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.193</td>\n",
       "      <td>101.84881493</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Blount County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7146</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Sweetwater County</td>\n",
       "      <td>56037</td>\n",
       "      <td>2017</td>\n",
       "      <td>0</td>\n",
       "      <td>210</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>0.100255</td>\n",
       "      <td>0.0129073</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0460107</td>\n",
       "      <td>0.174065</td>\n",
       "      <td>0.0637447</td>\n",
       "      <td>0.140341</td>\n",
       "      <td>350.161</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sweetwater County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7147</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Teton County</td>\n",
       "      <td>56039</td>\n",
       "      <td>2017</td>\n",
       "      <td>0</td>\n",
       "      <td>173</td>\n",
       "      <td>14</td>\n",
       "      <td>6</td>\n",
       "      <td>0.129773</td>\n",
       "      <td>0.0107243</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0377767</td>\n",
       "      <td>0.166082</td>\n",
       "      <td>0.0970266</td>\n",
       "      <td>0.150427</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Teton County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7148</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Uinta County</td>\n",
       "      <td>56041</td>\n",
       "      <td>2017</td>\n",
       "      <td>0</td>\n",
       "      <td>212</td>\n",
       "      <td>14</td>\n",
       "      <td>19</td>\n",
       "      <td>0.1168</td>\n",
       "      <td>0.0126789</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0487429</td>\n",
       "      <td>0.167006</td>\n",
       "      <td>0.0601751</td>\n",
       "      <td>0.130855</td>\n",
       "      <td>40.3594</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Uinta County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7149</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Washakie County</td>\n",
       "      <td>56043</td>\n",
       "      <td>2017</td>\n",
       "      <td>0</td>\n",
       "      <td>262</td>\n",
       "      <td>14</td>\n",
       "      <td>26</td>\n",
       "      <td>0.20329</td>\n",
       "      <td>0.0172911</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0402591</td>\n",
       "      <td>0.204609</td>\n",
       "      <td>0.0839618</td>\n",
       "      <td>0.168754</td>\n",
       "      <td>78.5053</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Washakie County</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7150</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Weston County</td>\n",
       "      <td>56045</td>\n",
       "      <td>2017</td>\n",
       "      <td>0</td>\n",
       "      <td>192</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0.183992</td>\n",
       "      <td>0.0156207</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0334171</td>\n",
       "      <td>0.182819</td>\n",
       "      <td>0.0670426</td>\n",
       "      <td>0.150819</td>\n",
       "      <td>143.393</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Weston County</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7151 rows × 131 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        state           county_x   fips  year  Dhosp  All_prim  Dprev  OUD  \\\n",
       "0     Alabama     Autauga County  01001  2013      1       302     13    8   \n",
       "1     Alabama     Baldwin County  01003  2013      1       273     13    8   \n",
       "2     Alabama     Barbour County  01005  2013      3       310     12    5   \n",
       "3     Alabama        Bibb County  01007  2013      3       303     16   16   \n",
       "4     Alabama      Blount County  01009  2013      3       281     17   13   \n",
       "...       ...                ...    ...   ...    ...       ...    ...  ...   \n",
       "7146  Wyoming  Sweetwater County  56037  2017      0       210     14   17   \n",
       "7147  Wyoming       Teton County  56039  2017      0       173     14    6   \n",
       "7148  Wyoming       Uinta County  56041  2017      0       212     14   19   \n",
       "7149  Wyoming    Washakie County  56043  2017      0       262     14   26   \n",
       "7150  Wyoming      Weston County  56045  2017      0       192     11    0   \n",
       "\n",
       "     % 65 and older raw value % American Indian and Alaskan Native raw value  \\\n",
       "0                0.1225505274                                   0.0048310927   \n",
       "1                0.1707236085                                   0.0071927034   \n",
       "2                0.1462443305                                   0.0064899148   \n",
       "3                0.1326100325                                   0.0031186858   \n",
       "4                0.1503372228                                   0.0062243182   \n",
       "...                       ...                                            ...   \n",
       "7146                 0.100255                                      0.0129073   \n",
       "7147                 0.129773                                      0.0107243   \n",
       "7148                   0.1168                                      0.0126789   \n",
       "7149                  0.20329                                      0.0172911   \n",
       "7150                 0.183992                                      0.0156207   \n",
       "\n",
       "      ... Total female population raw value Total male population raw value  \\\n",
       "0     ...                               NaN                             NaN   \n",
       "1     ...                               NaN                             NaN   \n",
       "2     ...                               NaN                             NaN   \n",
       "3     ...                               NaN                             NaN   \n",
       "4     ...                               NaN                             NaN   \n",
       "...   ...                               ...                             ...   \n",
       "7146  ...                               NaN                             NaN   \n",
       "7147  ...                               NaN                             NaN   \n",
       "7148  ...                               NaN                             NaN   \n",
       "7149  ...                               NaN                             NaN   \n",
       "7150  ...                               NaN                             NaN   \n",
       "\n",
       "     Unemployment raw value Uninsured adults raw value  \\\n",
       "0                      0.08                      0.174   \n",
       "1                     0.081                      0.231   \n",
       "2                     0.114                      0.236   \n",
       "3                     0.099                      0.224   \n",
       "4                     0.083                      0.239   \n",
       "...                     ...                        ...   \n",
       "7146              0.0460107                   0.174065   \n",
       "7147              0.0377767                   0.166082   \n",
       "7148              0.0487429                   0.167006   \n",
       "7149              0.0402591                   0.204609   \n",
       "7150              0.0334171                   0.182819   \n",
       "\n",
       "     Uninsured children raw value Uninsured raw value Violent crime raw value  \\\n",
       "0                           0.053               0.136            300.33668316   \n",
       "1                           0.091               0.191            214.73520962   \n",
       "2                           0.064               0.185            150.04942805   \n",
       "3                           0.061               0.177            246.49755063   \n",
       "4                           0.081               0.193            101.84881493   \n",
       "...                           ...                 ...                     ...   \n",
       "7146                    0.0637447            0.140341                 350.161   \n",
       "7147                    0.0970266            0.150427                     NaN   \n",
       "7148                    0.0601751            0.130855                 40.3594   \n",
       "7149                    0.0839618            0.168754                 78.5053   \n",
       "7150                    0.0670426            0.150819                 143.393   \n",
       "\n",
       "     W-2 enrollment raw value Year structure built raw value  \\\n",
       "0                         NaN                            NaN   \n",
       "1                         NaN                            NaN   \n",
       "2                         NaN                            NaN   \n",
       "3                         NaN                            NaN   \n",
       "4                         NaN                            NaN   \n",
       "...                       ...                            ...   \n",
       "7146                      NaN                            NaN   \n",
       "7147                      NaN                            NaN   \n",
       "7148                      NaN                            NaN   \n",
       "7149                      NaN                            NaN   \n",
       "7150                      NaN                            NaN   \n",
       "\n",
       "               county_y  \n",
       "0        Autauga County  \n",
       "1        Baldwin County  \n",
       "2        Barbour County  \n",
       "3           Bibb County  \n",
       "4         Blount County  \n",
       "...                 ...  \n",
       "7146  Sweetwater County  \n",
       "7147       Teton County  \n",
       "7148       Uinta County  \n",
       "7149    Washakie County  \n",
       "7150      Weston County  \n",
       "\n",
       "[7151 rows x 131 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def add_leading_zero(val):\n",
    "    if len(str(val)) == 4:\n",
    "        val = '0' + str(val)\n",
    "    return(val)\n",
    "\n",
    "mmd_df.fips = mmd_df.fips.apply(lambda x: add_leading_zero(x))\n",
    "mmd_df.state = df.state.apply(lambda x: x.capitalize())\n",
    "\n",
    "chr_df.dropna(subset=['year'], inplace=True)\n",
    "chr_df['year'] = chr_df['year'].astype('int')\n",
    "\n",
    "print(chr_df.shape)\n",
    "print(mmd_df.shape)\n",
    "\n",
    "master_df = pd.merge(mmd_df, chr_df, on=['fips', 'year'], how='inner')\n",
    "print(master_df.shape)\n",
    "master_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>county_x</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fips</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dhosp</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uninsured</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Violent crime</th>\n",
       "      <td>1.309934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>W-2 enrollment</th>\n",
       "      <td>42.575995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year structure built</th>\n",
       "      <td>42.563460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>county_y</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>131 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      percent_missing\n",
       "state                        0.000000\n",
       "county_x                     0.000000\n",
       "fips                         0.000000\n",
       "year                         0.000000\n",
       "Dhosp                        0.000000\n",
       "...                               ...\n",
       "Uninsured                    0.000000\n",
       "Violent crime                1.309934\n",
       "W-2 enrollment              42.575995\n",
       "Year structure built        42.563460\n",
       "county_y                     0.000000\n",
       "\n",
       "[131 rows x 1 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make the the column names more readable by dropping \"raw value\" from the name\n",
    "for col in master_df:\n",
    "    if col[-5:] == 'value':\n",
    "        master_df = master_df.rename(columns={col: col[:-10]})\n",
    "\n",
    "percent_missing = master_df.isnull().sum() * 100 / len(chr_df)\n",
    "missing_value_df = pd.DataFrame({'percent_missing': percent_missing})        \n",
    "\n",
    "keep_columns = missing_value_df[missing_value_df.percent_missing <= 10].index\n",
    "\n",
    "print(len(missing_value_df[percent_missing > 5]))\n",
    "missing_value_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7151, 62)\n",
      "state\n",
      "county_x\n",
      "fips\n",
      "year\n",
      "Dhosp\n",
      "All_prim\n",
      "Dprev\n",
      "OUD\n",
      "% 65 and older\n",
      "% American Indian and Alaskan Native\n",
      "% Asian\n",
      "% Females\n",
      "% Hispanic\n",
      "% Native Hawaiian/Other Pacific Islander\n",
      "% Non-Hispanic African American\n",
      "% Non-Hispanic white\n",
      "% Rural\n",
      "% below 18 years of age\n",
      "% not proficient in English\n",
      "Access to exercise opportunities\n",
      "Adult obesity\n",
      "Adult smoking\n",
      "Air pollution - particulate matter\n",
      "Alcohol-impaired driving deaths\n",
      "Children in poverty\n",
      "Children in single-parent households\n",
      "Dentists\n",
      "Diabetes monitoring\n",
      "Diabetes prevalence\n",
      "Drinking water violations\n",
      "Driving alone to work\n",
      "Excessive drinking\n",
      "Food environment index\n",
      "Food insecurity\n",
      "Health care costs\n",
      "High school graduation\n",
      "Limited access to healthy foods\n",
      "Long commute - driving alone\n",
      "Low birthweight\n",
      "Mammography screening\n",
      "Median household income\n",
      "Motor vehicle crash deaths\n",
      "Physical inactivity\n",
      "Poor mental health days\n",
      "Poor or fair health\n",
      "Poor physical health days\n",
      "Population\n",
      "Premature age-adjusted mortality\n",
      "Premature death\n",
      "Preventable hospital stays\n",
      "Primary care physicians\n",
      "Severe housing problems\n",
      "Sexually transmitted infections\n",
      "Some college\n",
      "State Abbreviation\n",
      "Teen births\n",
      "Unemployment\n",
      "Uninsured adults\n",
      "Uninsured children\n",
      "Uninsured\n",
      "Violent crime\n",
      "county_y\n"
     ]
    }
   ],
   "source": [
    "#print(chr_df2.shape)\n",
    "chr_df2 = master_df[keep_columns]\n",
    "print(chr_df2.shape)\n",
    "\n",
    "for col in chr_df2.columns:\n",
    "    print(col)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3722, 51)\n"
     ]
    }
   ],
   "source": [
    "chr_df3 = chr_df2\n",
    "chr_df3.dropna(inplace=True)\n",
    "\n",
    "X = chr_df3[['fips',\n",
    "            'year',\n",
    "            '% 65 and older',\n",
    "            '% American Indian and Alaskan Native',\n",
    "            '% Asian',\n",
    "            '% Females',\n",
    "            '% Hispanic',\n",
    "            '% Native Hawaiian/Other Pacific Islander',\n",
    "            '% Non-Hispanic African American',\n",
    "            '% Non-Hispanic white',\n",
    "            '% Rural',\n",
    "            '% below 18 years of age',\n",
    "            '% not proficient in English',\n",
    "            'Access to exercise opportunities',\n",
    "            'Adult obesity',\n",
    "            'Adult smoking',\n",
    "            'Air pollution - particulate matter',\n",
    "            'Children in poverty',\n",
    "            'Children in single-parent households',\n",
    "            'Dentists',\n",
    "            'Diabetes monitoring',\n",
    "            'Diabetes prevalence',\n",
    "            'Drinking water violations',\n",
    "            'Driving alone to work',\n",
    "            'Excessive drinking',\n",
    "            'Food environment index',\n",
    "            'Food insecurity',\n",
    "            'Health care costs',\n",
    "            'High school graduation',\n",
    "            'Limited access to healthy foods',\n",
    "            'Long commute - driving alone',\n",
    "            'Low birthweight',\n",
    "            'Mammography screening',\n",
    "            'Median household income',\n",
    "            'Physical inactivity',\n",
    "            'Poor mental health days',\n",
    "            'Poor or fair health',\n",
    "            'Poor physical health days',\n",
    "            'Population',\n",
    "            'Premature age-adjusted mortality',\n",
    "            'Premature death',\n",
    "            'Preventable hospital stays',\n",
    "            'Primary care physicians',\n",
    "            'Sexually transmitted infections',\n",
    "            'Some college',\n",
    "            'Teen births',\n",
    "            'Unemployment',\n",
    "            'Uninsured adults',\n",
    "            'Uninsured children',\n",
    "            'Uninsured',\n",
    "            'Violent crime']]\n",
    "\n",
    "print(X.shape)\n",
    "\n",
    "#outcomes = ['Cancer incidence', 'Cerebrovascular disease hospitalizations', 'Child mortality']\n",
    "Y = chr_df3[['Dhosp',\n",
    "            'All_prim',\n",
    "            'Dprev',\n",
    "            'OUD']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, train_size=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Number of features of the model must match the input. Model n_features is 51 and input n_features is 53 ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-47-6a862b7eed47>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mYtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mYpred1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mYpred1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/multioutput.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    194\u001b[0m         y = Parallel(n_jobs=self.n_jobs)(\n\u001b[1;32m    195\u001b[0m             \u001b[0mdelayed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparallel_helper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'predict'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 196\u001b[0;31m             for e in self.estimators_)\n\u001b[0m\u001b[1;32m    197\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1001\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1002\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1003\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1004\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    833\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 834\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    835\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    836\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    751\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    752\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 753\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    754\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    755\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    580\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    581\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 582\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 256\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 256\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/utils/fixes.py\u001b[0m in \u001b[0;36mparallel_helper\u001b[0;34m(obj, methodname, *args, **kwargs)\u001b[0m\n\u001b[1;32m    160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m     \"\"\"\n\u001b[0;32m--> 162\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethodname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/ensemble/forest.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    691\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'estimators_'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    692\u001b[0m         \u001b[0;31m# Check data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 693\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    694\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    695\u001b[0m         \u001b[0;31m# Assign chunk of trees to jobs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/ensemble/forest.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    357\u001b[0m                                  \"call `fit` before exploiting the model.\")\n\u001b[1;32m    358\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 359\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestimators_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    360\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    361\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/tree/tree.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    400\u001b[0m                              \u001b[0;34m\"match the input. Model n_features is %s and \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    401\u001b[0m                              \u001b[0;34m\"input n_features is %s \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 402\u001b[0;31m                              % (self.n_features_, n_features))\n\u001b[0m\u001b[1;32m    403\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Number of features of the model must match the input. Model n_features is 51 and input n_features is 53 "
     ]
    }
   ],
   "source": [
    "from sklearn.multioutput import MultiOutputRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "rfc1 = RandomForestRegressor(100)\n",
    "model = MultiOutputRegressor(rfc1)\n",
    "model.fit(Xtrain, Ytrain)\n",
    "\n",
    "Ypred1 = model.predict(Xtest)\n",
    "Ypred1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.8042948 , 0.75780409, 0.83982255, 0.84124425, 0.85088392,\n",
       "       0.83995814, 0.81927562, 0.80894002, 0.82169517, 0.72263938])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "#accuracy_score(y_true, y_pred,\n",
    "\n",
    "cross_val_score(rfc1, X, Y, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = pd.DataFrame(Ypred1)\n",
    "df3 = df3.reset_index()\n",
    "print(df3.shape)\n",
    "Xtest = Xtest.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>fips</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>214.21</td>\n",
       "      <td>13.11</td>\n",
       "      <td>15.23</td>\n",
       "      <td>56043</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.17</td>\n",
       "      <td>215.99</td>\n",
       "      <td>14.54</td>\n",
       "      <td>24.13</td>\n",
       "      <td>06021</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2.36</td>\n",
       "      <td>347.03</td>\n",
       "      <td>17.81</td>\n",
       "      <td>24.71</td>\n",
       "      <td>48387</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1.96</td>\n",
       "      <td>299.29</td>\n",
       "      <td>17.52</td>\n",
       "      <td>10.45</td>\n",
       "      <td>40071</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2.70</td>\n",
       "      <td>252.57</td>\n",
       "      <td>18.82</td>\n",
       "      <td>17.57</td>\n",
       "      <td>55035</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index     0       1      2      3   fips  year\n",
       "0      0  0.10  214.21  13.11  15.23  56043  2016\n",
       "1      1  0.17  215.99  14.54  24.13  06021  2016\n",
       "2      2  2.36  347.03  17.81  24.71  48387  2017\n",
       "3      3  1.96  299.29  17.52  10.45  40071  2014\n",
       "4      4  2.70  252.57  18.82  17.57  55035  2017"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = pd.concat([df3, Xtest[['fips', 'year']]], axis=1)\n",
    "df3.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>fips</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.10</td>\n",
       "      <td>214.21</td>\n",
       "      <td>13.11</td>\n",
       "      <td>15.23</td>\n",
       "      <td>56043</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.17</td>\n",
       "      <td>215.99</td>\n",
       "      <td>14.54</td>\n",
       "      <td>24.13</td>\n",
       "      <td>06021</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.36</td>\n",
       "      <td>347.03</td>\n",
       "      <td>17.81</td>\n",
       "      <td>24.71</td>\n",
       "      <td>48387</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.96</td>\n",
       "      <td>299.29</td>\n",
       "      <td>17.52</td>\n",
       "      <td>10.45</td>\n",
       "      <td>40071</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.70</td>\n",
       "      <td>252.57</td>\n",
       "      <td>18.82</td>\n",
       "      <td>17.57</td>\n",
       "      <td>55035</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      0       1      2      3   fips  year\n",
       "0  0.10  214.21  13.11  15.23  56043  2016\n",
       "1  0.17  215.99  14.54  24.13  06021  2016\n",
       "2  2.36  347.03  17.81  24.71  48387  2017\n",
       "3  1.96  299.29  17.52  10.45  40071  2014\n",
       "4  2.70  252.57  18.82  17.57  55035  2017"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()\n",
    "#df3.drop('index', axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>year</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fips</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>38057</th>\n",
       "      <td>15.05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38059</th>\n",
       "      <td>16.47</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38071</th>\n",
       "      <td>16.46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38077</th>\n",
       "      <td>16.22</td>\n",
       "      <td>15.98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38079</th>\n",
       "      <td>NaN</td>\n",
       "      <td>14.67</td>\n",
       "      <td>14.48</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09001</th>\n",
       "      <td>16.98</td>\n",
       "      <td>17.33</td>\n",
       "      <td>17.28</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09003</th>\n",
       "      <td>19.07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09005</th>\n",
       "      <td>17.13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.94</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09009</th>\n",
       "      <td>18.81</td>\n",
       "      <td>17.57</td>\n",
       "      <td>17.81</td>\n",
       "      <td>18.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09011</th>\n",
       "      <td>17.27</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.70</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>963 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "year    2014   2015   2016   2017\n",
       "fips                             \n",
       "38057  15.05    NaN    NaN    NaN\n",
       "38059  16.47    NaN    NaN  17.17\n",
       "38071  16.46    NaN    NaN    NaN\n",
       "38077  16.22  15.98    NaN  16.56\n",
       "38079    NaN  14.67  14.48    NaN\n",
       "...      ...    ...    ...    ...\n",
       "09001  16.98  17.33  17.28    NaN\n",
       "09003  19.07    NaN    NaN  19.44\n",
       "09005  17.13    NaN  17.94    NaN\n",
       "09009  18.81  17.57  17.81  18.04\n",
       "09011  17.27    NaN  19.70    NaN\n",
       "\n",
       "[963 rows x 4 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df3.drop('index', axis=1, inplace=True)\n",
    "df3.columns = ['Dhosp',\n",
    "              'All_prim',\n",
    "              'Dprev',\n",
    "              'OUD', 'fips', 'year']\n",
    "\n",
    "pvtable = pd.pivot_table(data = df3, index = 'fips', columns = 'year', values = 'Dprev')\n",
    "pvtable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-32-f660244c2bcf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdhosp_year_avg_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'year'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Dhosp'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'All_prim'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Dprev'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'OUD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdhosp_year_avg_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dhosp_year_avg_df = df3.groupby(['fips'])['Dhosp','All_prim','Dprev', 'OUD'].mean()\n",
    "dhosp_year_avg_df.plot()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinregressResult(slope=-4.515000000000001, intercept=9103.745000000003, rvalue=-0.7745966692414834, pvalue=0.22540333075851657, stderr=2.6067364653911604)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import linregress \n",
    "\n",
    "pvtable.fillna(0, inplace=True)\n",
    "\n",
    "a = [2014, 2015, 2016, 2017]\n",
    "\n",
    "b = pvtable.iloc[0, :].values\n",
    "linregress(a, b)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([15.05,  0.  ,  0.  ,  0.  ])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pvtable.iloc[0, :].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "bad input shape (1861, 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-f959f6821c99>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mgradient_boosting_regressor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensemble\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientBoostingRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mgradient_boosting_regressor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mYtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/ensemble/gradient_boosting.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m   1448\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1449\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1450\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolumn_or_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwarn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1451\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1452\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcolumn_or_1d\u001b[0;34m(y, warn)\u001b[0m\n\u001b[1;32m    758\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 760\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bad input shape {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    761\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    762\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: bad input shape (1861, 4)"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn import ensemble\n",
    "from sklearn import linear_model\n",
    "\n",
    "params = {\n",
    "    'n_estimators': 1,\n",
    "    'max_depth': 1,\n",
    "    'learning_rate': 1,\n",
    "    'criterion': 'mse'\n",
    "}\n",
    "\n",
    "gradient_boosting_regressor = ensemble.GradientBoostingRegressor(**params)\n",
    "\n",
    "gradient_boosting_regressor.fit(Xtrain, Ytrain)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
